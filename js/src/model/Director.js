/**
 * letsrolld API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectorFilmsInner from './DirectorFilmsInner';
import DirectorInfo from './DirectorInfo';

/**
 * The Director model module.
 * @module model/Director
 * @version 0.1
 */
class Director {
    /**
     * Constructs a new <code>Director</code>.
     * @alias module:model/Director
     * @param info {module:model/DirectorInfo} 
     */
    constructor(info) { 
        
        Director.initialize(this, info);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, info) { 
        obj['info'] = info;
    }

    /**
     * Constructs a <code>Director</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Director} obj Optional instance to populate.
     * @return {module:model/Director} The populated <code>Director</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Director();

            if (data.hasOwnProperty('info')) {
                obj['info'] = DirectorInfo.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('films')) {
                obj['films'] = ApiClient.convertToType(data['films'], [DirectorFilmsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Director</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Director</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Director.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `info`
        if (data['info']) { // data not null
          DirectorInfo.validateJSON(data['info']);
        }
        if (data['films']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['films'])) {
                throw new Error("Expected the field `films` to be an array in the JSON data but got " + data['films']);
            }
            // validate the optional field `films` (array)
            for (const item of data['films']) {
                DirectorFilmsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Director.RequiredProperties = ["info"];

/**
 * @member {module:model/DirectorInfo} info
 */
Director.prototype['info'] = undefined;

/**
 * @member {Array.<module:model/DirectorFilmsInner>} films
 */
Director.prototype['films'] = undefined;






export default Director;

